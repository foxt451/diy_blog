# Generated by Django 4.0.3 on 2022-03-23 14:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_date', models.DateTimeField(auto_now_add=True, help_text='The time when the blog is created', verbose_name='Posted')),
                ('title', models.CharField(help_text="Blog's title", max_length=100)),
                ('content', models.TextField(help_text="Blog's content", max_length=10000)),
            ],
            options={
                'ordering': ('-post_date',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Text of the comment', max_length=1000)),
                ('post_date', models.DateTimeField(auto_now_add=True, help_text='Time when comment was posted', verbose_name='Posted')),
                ('blog', models.ForeignKey(help_text='Blog being commented', on_delete=django.db.models.deletion.CASCADE, to='blog.blog')),
                ('commenter', models.ForeignKey(help_text='The person commenting on the blog', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('post_date',),
            },
        ),
        migrations.CreateModel(
            name='Blogger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(help_text="Author's biography", max_length=1000)),
                ('user', models.OneToOneField(help_text='User that is going to be an author', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('user__username',),
            },
        ),
        migrations.AddField(
            model_name='blog',
            name='author',
            field=models.ForeignKey(help_text='Author of the blog', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.blogger'),
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_date_time', models.DateTimeField(auto_now_add=True, help_text='When the application was sent for consideration')),
                ('motivation', models.TextField(help_text='Why you are going to write as an author. Describe yourself and your experience', max_length=10000, validators=[django.core.validators.MinLengthValidator(100)])),
                ('bio', models.TextField(help_text='Your biography', max_length=1000)),
                ('status', models.CharField(choices=[('a', 'Accepted'), ('r', 'Rejected'), ('w', 'Awaiting')], default='w', help_text='Status of the application', max_length=1)),
                ('comment', models.TextField(blank=True, default='', help_text='The comment on why the application got this status', max_length=2000)),
                ('user', models.ForeignKey(help_text='User that wants to be an author', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-application_date_time',),
                'permissions': [('can_approve_application', 'Can approve applications to be an author')],
            },
        ),
    ]
